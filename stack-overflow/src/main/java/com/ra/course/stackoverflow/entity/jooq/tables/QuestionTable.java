/*
 * This file is generated by jOOQ.
 */
package com.ra.course.stackoverflow.entity.jooq.tables;


import com.ra.course.stackoverflow.entity.jooq.Indexes;
import com.ra.course.stackoverflow.entity.jooq.Keys;
import com.ra.course.stackoverflow.entity.jooq.Stackoverflow;
import com.ra.course.stackoverflow.entity.jooq.tables.records.QuestionRecord;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import javax.annotation.processing.Generated;
import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class QuestionTable extends TableImpl<QuestionRecord> {

    private static final long serialVersionUID = 12348243;

    /**
     * The reference instance of <code>stackoverflow.question</code>
     */
    public static final QuestionTable QUESTION_TABLE = new QuestionTable();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<QuestionRecord> getRecordType() {
        return QuestionRecord.class;
    }

    /**
     * The column <code>stackoverflow.question.id</code>.
     */
    public final TableField<QuestionRecord, Integer> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>stackoverflow.question.title</code>.
     */
    public final TableField<QuestionRecord, String> TITLE = createField(DSL.name("title"), org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>stackoverflow.question.description</code>.
     */
    public final TableField<QuestionRecord, String> DESCRIPTION = createField(DSL.name("description"), org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>stackoverflow.question.view_count</code>.
     */
    public final TableField<QuestionRecord, Integer> VIEW_COUNT = createField(DSL.name("view_count"), org.jooq.impl.SQLDataType.INTEGER.defaultValue(DSL.inline("0", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>stackoverflow.question.vote_count</code>.
     */
    public final TableField<QuestionRecord, Integer> VOTE_COUNT = createField(DSL.name("vote_count"), org.jooq.impl.SQLDataType.INTEGER.defaultValue(DSL.inline("0", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>stackoverflow.question.created</code>.
     */
    public final TableField<QuestionRecord, Timestamp> CREATED = createField(DSL.name("created"), org.jooq.impl.SQLDataType.TIMESTAMP.defaultValue(DSL.field("current_timestamp()", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");

    /**
     * The column <code>stackoverflow.question.updated</code>.
     */
    public final TableField<QuestionRecord, Timestamp> UPDATED = createField(DSL.name("updated"), org.jooq.impl.SQLDataType.TIMESTAMP.defaultValue(DSL.field("current_timestamp()", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");

    /**
     * The column <code>stackoverflow.question.status</code>.
     */
    public final TableField<QuestionRecord, String> STATUS = createField(DSL.name("status"), org.jooq.impl.SQLDataType.VARCHAR(11).defaultValue(DSL.inline("NULL", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>stackoverflow.question.closing_remark</code>.
     */
    public final TableField<QuestionRecord, String> CLOSING_REMARK = createField(DSL.name("closing_remark"), org.jooq.impl.SQLDataType.VARCHAR(45).defaultValue(DSL.inline("NULL", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>stackoverflow.question.author_id</code>.
     */
    public final TableField<QuestionRecord, Integer> AUTHOR_ID = createField(DSL.name("author_id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * Create a <code>stackoverflow.question</code> table reference
     */
    public QuestionTable() {
        this(DSL.name("question"), null);
    }

    /**
     * Create an aliased <code>stackoverflow.question</code> table reference
     */
    public QuestionTable(String alias) {
        this(DSL.name(alias), QUESTION_TABLE);
    }

    /**
     * Create an aliased <code>stackoverflow.question</code> table reference
     */
    public QuestionTable(Name alias) {
        this(alias, QUESTION_TABLE);
    }

    private QuestionTable(Name alias, Table<QuestionRecord> aliased) {
        this(alias, aliased, null);
    }

    private QuestionTable(Name alias, Table<QuestionRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> QuestionTable(Table<O> child, ForeignKey<O, QuestionRecord> key) {
        super(child, key, QUESTION_TABLE);
    }

    @Override
    public Schema getSchema() {
        return Stackoverflow.STACKOVERFLOW;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.QUESTION_FK_AUTHOR_ID_IN_QUESTION_IDX, Indexes.QUESTION_PRIMARY);
    }

    @Override
    public Identity<QuestionRecord, Integer> getIdentity() {
        return Keys.IDENTITY_QUESTION;
    }

    @Override
    public UniqueKey<QuestionRecord> getPrimaryKey() {
        return Keys.KEY_QUESTION_PRIMARY;
    }

    @Override
    public List<UniqueKey<QuestionRecord>> getKeys() {
        return Arrays.<UniqueKey<QuestionRecord>>asList(Keys.KEY_QUESTION_PRIMARY);
    }

    @Override
    public List<ForeignKey<QuestionRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<QuestionRecord, ?>>asList(Keys.FK_AUTHOR_ID_IN_QUESTION);
    }

    public AccountTable account() {
        return new AccountTable(this, Keys.FK_AUTHOR_ID_IN_QUESTION);
    }

    @Override
    public QuestionTable as(String alias) {
        return new QuestionTable(DSL.name(alias), this);
    }

    @Override
    public QuestionTable as(Name alias) {
        return new QuestionTable(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public QuestionTable rename(String name) {
        return new QuestionTable(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public QuestionTable rename(Name name) {
        return new QuestionTable(name, null);
    }

    // -------------------------------------------------------------------------
    // Row10 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row10<Integer, String, String, Integer, Integer, Timestamp, Timestamp, String, String, Integer> fieldsRow() {
        return (Row10) super.fieldsRow();
    }
}
