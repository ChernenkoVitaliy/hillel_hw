/*
 * This file is generated by jOOQ.
 */
package com.ra.course.stackoverflow.entity.jooq.tables.records;


import com.ra.course.stackoverflow.entity.jooq.tables.AnswerTable;
import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record8;
import org.jooq.Row8;
import org.jooq.impl.UpdatableRecordImpl;

import javax.annotation.processing.Generated;
import java.sql.Timestamp;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AnswerRecord extends UpdatableRecordImpl<AnswerRecord> implements Record8<Integer, String, Byte, Integer, Integer, Timestamp, Integer, Integer> {

    private static final long serialVersionUID = -1439454003;

    /**
     * Setter for <code>stackoverflow.answer.id</code>.
     */
    public void setId(Integer value) {
        set(0, value);
    }

    /**
     * Getter for <code>stackoverflow.answer.id</code>.
     */
    public Integer getId() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>stackoverflow.answer.answer_text</code>.
     */
    public void setAnswerText(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>stackoverflow.answer.answer_text</code>.
     */
    public String getAnswerText() {
        return (String) get(1);
    }

    /**
     * Setter for <code>stackoverflow.answer.accepted</code>.
     */
    public void setAccepted(Byte value) {
        set(2, value);
    }

    /**
     * Getter for <code>stackoverflow.answer.accepted</code>.
     */
    public Byte getAccepted() {
        return (Byte) get(2);
    }

    /**
     * Setter for <code>stackoverflow.answer.vote_count</code>.
     */
    public void setVoteCount(Integer value) {
        set(3, value);
    }

    /**
     * Getter for <code>stackoverflow.answer.vote_count</code>.
     */
    public Integer getVoteCount() {
        return (Integer) get(3);
    }

    /**
     * Setter for <code>stackoverflow.answer.flag_count</code>.
     */
    public void setFlagCount(Integer value) {
        set(4, value);
    }

    /**
     * Getter for <code>stackoverflow.answer.flag_count</code>.
     */
    public Integer getFlagCount() {
        return (Integer) get(4);
    }

    /**
     * Setter for <code>stackoverflow.answer.created</code>.
     */
    public void setCreated(Timestamp value) {
        set(5, value);
    }

    /**
     * Getter for <code>stackoverflow.answer.created</code>.
     */
    public Timestamp getCreated() {
        return (Timestamp) get(5);
    }

    /**
     * Setter for <code>stackoverflow.answer.author_id</code>.
     */
    public void setAuthorId(Integer value) {
        set(6, value);
    }

    /**
     * Getter for <code>stackoverflow.answer.author_id</code>.
     */
    public Integer getAuthorId() {
        return (Integer) get(6);
    }

    /**
     * Setter for <code>stackoverflow.answer.question_id</code>.
     */
    public void setQuestionId(Integer value) {
        set(7, value);
    }

    /**
     * Getter for <code>stackoverflow.answer.question_id</code>.
     */
    public Integer getQuestionId() {
        return (Integer) get(7);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record8 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row8<Integer, String, Byte, Integer, Integer, Timestamp, Integer, Integer> fieldsRow() {
        return (Row8) super.fieldsRow();
    }

    @Override
    public Row8<Integer, String, Byte, Integer, Integer, Timestamp, Integer, Integer> valuesRow() {
        return (Row8) super.valuesRow();
    }

    @Override
    public Field<Integer> field1() {
        return AnswerTable.ANSWER_TABLE.ID;
    }

    @Override
    public Field<String> field2() {
        return AnswerTable.ANSWER_TABLE.ANSWER_TEXT;
    }

    @Override
    public Field<Byte> field3() {
        return AnswerTable.ANSWER_TABLE.ACCEPTED;
    }

    @Override
    public Field<Integer> field4() {
        return AnswerTable.ANSWER_TABLE.VOTE_COUNT;
    }

    @Override
    public Field<Integer> field5() {
        return AnswerTable.ANSWER_TABLE.FLAG_COUNT;
    }

    @Override
    public Field<Timestamp> field6() {
        return AnswerTable.ANSWER_TABLE.CREATED;
    }

    @Override
    public Field<Integer> field7() {
        return AnswerTable.ANSWER_TABLE.AUTHOR_ID;
    }

    @Override
    public Field<Integer> field8() {
        return AnswerTable.ANSWER_TABLE.QUESTION_ID;
    }

    @Override
    public Integer component1() {
        return getId();
    }

    @Override
    public String component2() {
        return getAnswerText();
    }

    @Override
    public Byte component3() {
        return getAccepted();
    }

    @Override
    public Integer component4() {
        return getVoteCount();
    }

    @Override
    public Integer component5() {
        return getFlagCount();
    }

    @Override
    public Timestamp component6() {
        return getCreated();
    }

    @Override
    public Integer component7() {
        return getAuthorId();
    }

    @Override
    public Integer component8() {
        return getQuestionId();
    }

    @Override
    public Integer value1() {
        return getId();
    }

    @Override
    public String value2() {
        return getAnswerText();
    }

    @Override
    public Byte value3() {
        return getAccepted();
    }

    @Override
    public Integer value4() {
        return getVoteCount();
    }

    @Override
    public Integer value5() {
        return getFlagCount();
    }

    @Override
    public Timestamp value6() {
        return getCreated();
    }

    @Override
    public Integer value7() {
        return getAuthorId();
    }

    @Override
    public Integer value8() {
        return getQuestionId();
    }

    @Override
    public AnswerRecord value1(Integer value) {
        setId(value);
        return this;
    }

    @Override
    public AnswerRecord value2(String value) {
        setAnswerText(value);
        return this;
    }

    @Override
    public AnswerRecord value3(Byte value) {
        setAccepted(value);
        return this;
    }

    @Override
    public AnswerRecord value4(Integer value) {
        setVoteCount(value);
        return this;
    }

    @Override
    public AnswerRecord value5(Integer value) {
        setFlagCount(value);
        return this;
    }

    @Override
    public AnswerRecord value6(Timestamp value) {
        setCreated(value);
        return this;
    }

    @Override
    public AnswerRecord value7(Integer value) {
        setAuthorId(value);
        return this;
    }

    @Override
    public AnswerRecord value8(Integer value) {
        setQuestionId(value);
        return this;
    }

    @Override
    public AnswerRecord values(Integer value1, String value2, Byte value3, Integer value4, Integer value5, Timestamp value6, Integer value7, Integer value8) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        value8(value8);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached AnswerRecord
     */
    public AnswerRecord() {
        super(AnswerTable.ANSWER_TABLE);
    }

    /**
     * Create a detached, initialised AnswerRecord
     */
    public AnswerRecord(Integer id, String answerText, Byte accepted, Integer voteCount, Integer flagCount, Timestamp created, Integer authorId, Integer questionId) {
        super(AnswerTable.ANSWER_TABLE);

        set(0, id);
        set(1, answerText);
        set(2, accepted);
        set(3, voteCount);
        set(4, flagCount);
        set(5, created);
        set(6, authorId);
        set(7, questionId);
    }
}
