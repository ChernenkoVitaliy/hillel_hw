/*
 * This file is generated by jOOQ.
 */
package com.ra.course.stackoverflow.entity.jooq.tables;


import com.ra.course.stackoverflow.entity.jooq.Indexes;
import com.ra.course.stackoverflow.entity.jooq.Keys;
import com.ra.course.stackoverflow.entity.jooq.Stackoverflow;
import com.ra.course.stackoverflow.entity.jooq.tables.records.CommentRecord;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import javax.annotation.processing.Generated;
import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CommentTable extends TableImpl<CommentRecord> {

    private static final long serialVersionUID = 1554719213;

    /**
     * The reference instance of <code>stackoverflow.comment</code>
     */
    public static final CommentTable COMMENT_TABLE = new CommentTable();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CommentRecord> getRecordType() {
        return CommentRecord.class;
    }

    /**
     * The column <code>stackoverflow.comment.id</code>.
     */
    public final TableField<CommentRecord, Integer> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>stackoverflow.comment.text</code>.
     */
    public final TableField<CommentRecord, String> TEXT = createField(DSL.name("text"), org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>stackoverflow.comment.created</code>.
     */
    public final TableField<CommentRecord, Timestamp> CREATED = createField(DSL.name("created"), org.jooq.impl.SQLDataType.TIMESTAMP.defaultValue(DSL.field("current_timestamp()", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");

    /**
     * The column <code>stackoverflow.comment.flag_count</code>.
     */
    public final TableField<CommentRecord, Integer> FLAG_COUNT = createField(DSL.name("flag_count"), org.jooq.impl.SQLDataType.INTEGER.defaultValue(DSL.inline("0", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>stackoverflow.comment.vote_count</code>.
     */
    public final TableField<CommentRecord, Integer> VOTE_COUNT = createField(DSL.name("vote_count"), org.jooq.impl.SQLDataType.INTEGER.defaultValue(DSL.inline("0", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>stackoverflow.comment.author_id</code>.
     */
    public final TableField<CommentRecord, Integer> AUTHOR_ID = createField(DSL.name("author_id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>stackoverflow.comment.answer_id</code>.
     */
    public final TableField<CommentRecord, Integer> ANSWER_ID = createField(DSL.name("answer_id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * Create a <code>stackoverflow.comment</code> table reference
     */
    public CommentTable() {
        this(DSL.name("comment"), null);
    }

    /**
     * Create an aliased <code>stackoverflow.comment</code> table reference
     */
    public CommentTable(String alias) {
        this(DSL.name(alias), COMMENT_TABLE);
    }

    /**
     * Create an aliased <code>stackoverflow.comment</code> table reference
     */
    public CommentTable(Name alias) {
        this(alias, COMMENT_TABLE);
    }

    private CommentTable(Name alias, Table<CommentRecord> aliased) {
        this(alias, aliased, null);
    }

    private CommentTable(Name alias, Table<CommentRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> CommentTable(Table<O> child, ForeignKey<O, CommentRecord> key) {
        super(child, key, COMMENT_TABLE);
    }

    @Override
    public Schema getSchema() {
        return Stackoverflow.STACKOVERFLOW;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.COMMENT_FK_ANSWER_ID_IN_COMMENT_IDX, Indexes.COMMENT_FK_AUTHOR_ID_IN_COMMENT_IDX, Indexes.COMMENT_PRIMARY);
    }

    @Override
    public Identity<CommentRecord, Integer> getIdentity() {
        return Keys.IDENTITY_COMMENT;
    }

    @Override
    public UniqueKey<CommentRecord> getPrimaryKey() {
        return Keys.KEY_COMMENT_PRIMARY;
    }

    @Override
    public List<UniqueKey<CommentRecord>> getKeys() {
        return Arrays.<UniqueKey<CommentRecord>>asList(Keys.KEY_COMMENT_PRIMARY);
    }

    @Override
    public List<ForeignKey<CommentRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<CommentRecord, ?>>asList(Keys.FK_AUTHOR_ID_IN_COMMENT, Keys.FK_ANSWER_ID_IN_COMMENT);
    }

    public AccountTable account() {
        return new AccountTable(this, Keys.FK_AUTHOR_ID_IN_COMMENT);
    }

    public AnswerTable answer() {
        return new AnswerTable(this, Keys.FK_ANSWER_ID_IN_COMMENT);
    }

    @Override
    public CommentTable as(String alias) {
        return new CommentTable(DSL.name(alias), this);
    }

    @Override
    public CommentTable as(Name alias) {
        return new CommentTable(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public CommentTable rename(String name) {
        return new CommentTable(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public CommentTable rename(Name name) {
        return new CommentTable(name, null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<Integer, String, Timestamp, Integer, Integer, Integer, Integer> fieldsRow() {
        return (Row7) super.fieldsRow();
    }
}
