/*
 * This file is generated by jOOQ.
 */
package com.ra.course.stackoverflow.entity.jooq.tables;


import com.ra.course.stackoverflow.entity.jooq.Indexes;
import com.ra.course.stackoverflow.entity.jooq.Keys;
import com.ra.course.stackoverflow.entity.jooq.Stackoverflow;
import com.ra.course.stackoverflow.entity.jooq.tables.records.AnswerRecord;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import javax.annotation.processing.Generated;
import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AnswerTable extends TableImpl<AnswerRecord> {

    private static final long serialVersionUID = -1740714627;

    /**
     * The reference instance of <code>stackoverflow.answer</code>
     */
    public static final AnswerTable ANSWER_TABLE = new AnswerTable();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AnswerRecord> getRecordType() {
        return AnswerRecord.class;
    }

    /**
     * The column <code>stackoverflow.answer.id</code>.
     */
    public final TableField<AnswerRecord, Integer> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>stackoverflow.answer.answer_text</code>.
     */
    public final TableField<AnswerRecord, String> ANSWER_TEXT = createField(DSL.name("answer_text"), org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>stackoverflow.answer.accepted</code>.
     */
    public final TableField<AnswerRecord, Byte> ACCEPTED = createField(DSL.name("accepted"), org.jooq.impl.SQLDataType.TINYINT.defaultValue(DSL.inline("0", org.jooq.impl.SQLDataType.TINYINT)), this, "");

    /**
     * The column <code>stackoverflow.answer.vote_count</code>.
     */
    public final TableField<AnswerRecord, Integer> VOTE_COUNT = createField(DSL.name("vote_count"), org.jooq.impl.SQLDataType.INTEGER.defaultValue(DSL.inline("0", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>stackoverflow.answer.flag_count</code>.
     */
    public final TableField<AnswerRecord, Integer> FLAG_COUNT = createField(DSL.name("flag_count"), org.jooq.impl.SQLDataType.INTEGER.defaultValue(DSL.inline("0", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>stackoverflow.answer.created</code>.
     */
    public final TableField<AnswerRecord, Timestamp> CREATED = createField(DSL.name("created"), org.jooq.impl.SQLDataType.TIMESTAMP.defaultValue(DSL.field("current_timestamp()", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");

    /**
     * The column <code>stackoverflow.answer.author_id</code>.
     */
    public final TableField<AnswerRecord, Integer> AUTHOR_ID = createField(DSL.name("author_id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>stackoverflow.answer.question_id</code>.
     */
    public final TableField<AnswerRecord, Integer> QUESTION_ID = createField(DSL.name("question_id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * Create a <code>stackoverflow.answer</code> table reference
     */
    public AnswerTable() {
        this(DSL.name("answer"), null);
    }

    /**
     * Create an aliased <code>stackoverflow.answer</code> table reference
     */
    public AnswerTable(String alias) {
        this(DSL.name(alias), ANSWER_TABLE);
    }

    /**
     * Create an aliased <code>stackoverflow.answer</code> table reference
     */
    public AnswerTable(Name alias) {
        this(alias, ANSWER_TABLE);
    }

    private AnswerTable(Name alias, Table<AnswerRecord> aliased) {
        this(alias, aliased, null);
    }

    private AnswerTable(Name alias, Table<AnswerRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> AnswerTable(Table<O> child, ForeignKey<O, AnswerRecord> key) {
        super(child, key, ANSWER_TABLE);
    }

    @Override
    public Schema getSchema() {
        return Stackoverflow.STACKOVERFLOW;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.ANSWER_FK_AUTHOR_ID_IN_ANSWER_IDX, Indexes.ANSWER_FK_QUESTION_ID_IN_ANSWER_IDX, Indexes.ANSWER_PRIMARY);
    }

    @Override
    public Identity<AnswerRecord, Integer> getIdentity() {
        return Keys.IDENTITY_ANSWER;
    }

    @Override
    public UniqueKey<AnswerRecord> getPrimaryKey() {
        return Keys.KEY_ANSWER_PRIMARY;
    }

    @Override
    public List<UniqueKey<AnswerRecord>> getKeys() {
        return Arrays.<UniqueKey<AnswerRecord>>asList(Keys.KEY_ANSWER_PRIMARY);
    }

    @Override
    public List<ForeignKey<AnswerRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<AnswerRecord, ?>>asList(Keys.FK_AUTHOR_ID_IN_ANSWER, Keys.FK_QUESTION_ID_IN_ANSWER);
    }

    public AccountTable account() {
        return new AccountTable(this, Keys.FK_AUTHOR_ID_IN_ANSWER);
    }

    public QuestionTable question() {
        return new QuestionTable(this, Keys.FK_QUESTION_ID_IN_ANSWER);
    }

    @Override
    public AnswerTable as(String alias) {
        return new AnswerTable(DSL.name(alias), this);
    }

    @Override
    public AnswerTable as(Name alias) {
        return new AnswerTable(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public AnswerTable rename(String name) {
        return new AnswerTable(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public AnswerTable rename(Name name) {
        return new AnswerTable(name, null);
    }

    // -------------------------------------------------------------------------
    // Row8 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row8<Integer, String, Byte, Integer, Integer, Timestamp, Integer, Integer> fieldsRow() {
        return (Row8) super.fieldsRow();
    }
}
