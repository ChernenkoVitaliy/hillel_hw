/*
 * This file is generated by jOOQ.
 */
package com.ra.course.stackoverflow.entity.jooq;


import com.ra.course.stackoverflow.entity.jooq.tables.AccountTable;
import com.ra.course.stackoverflow.entity.jooq.tables.AnswerTable;
import com.ra.course.stackoverflow.entity.jooq.tables.CommentTable;
import com.ra.course.stackoverflow.entity.jooq.tables.QuestionTable;
import com.ra.course.stackoverflow.entity.jooq.tables.records.AccountRecord;
import com.ra.course.stackoverflow.entity.jooq.tables.records.AnswerRecord;
import com.ra.course.stackoverflow.entity.jooq.tables.records.CommentRecord;
import com.ra.course.stackoverflow.entity.jooq.tables.records.QuestionRecord;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.UniqueKey;
import org.jooq.impl.Internal;

import javax.annotation.processing.Generated;


/**
 * A class modelling foreign key relationships and constraints of tables of 
 * the <code>stackoverflow</code> schema.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Keys {

    // -------------------------------------------------------------------------
    // IDENTITY definitions
    // -------------------------------------------------------------------------

    public static final Identity<AccountRecord, Integer> IDENTITY_ACCOUNT = Identities0.IDENTITY_ACCOUNT;
    public static final Identity<AnswerRecord, Integer> IDENTITY_ANSWER = Identities0.IDENTITY_ANSWER;
    public static final Identity<CommentRecord, Integer> IDENTITY_COMMENT = Identities0.IDENTITY_COMMENT;
    public static final Identity<QuestionRecord, Integer> IDENTITY_QUESTION = Identities0.IDENTITY_QUESTION;

    // -------------------------------------------------------------------------
    // UNIQUE and PRIMARY KEY definitions
    // -------------------------------------------------------------------------

    public static final UniqueKey<AccountRecord> KEY_ACCOUNT_PRIMARY = UniqueKeys0.KEY_ACCOUNT_PRIMARY;
    public static final UniqueKey<AnswerRecord> KEY_ANSWER_PRIMARY = UniqueKeys0.KEY_ANSWER_PRIMARY;
    public static final UniqueKey<CommentRecord> KEY_COMMENT_PRIMARY = UniqueKeys0.KEY_COMMENT_PRIMARY;
    public static final UniqueKey<QuestionRecord> KEY_QUESTION_PRIMARY = UniqueKeys0.KEY_QUESTION_PRIMARY;

    // -------------------------------------------------------------------------
    // FOREIGN KEY definitions
    // -------------------------------------------------------------------------

    public static final ForeignKey<AnswerRecord, AccountRecord> FK_AUTHOR_ID_IN_ANSWER = ForeignKeys0.FK_AUTHOR_ID_IN_ANSWER;
    public static final ForeignKey<AnswerRecord, QuestionRecord> FK_QUESTION_ID_IN_ANSWER = ForeignKeys0.FK_QUESTION_ID_IN_ANSWER;
    public static final ForeignKey<CommentRecord, AccountRecord> FK_AUTHOR_ID_IN_COMMENT = ForeignKeys0.FK_AUTHOR_ID_IN_COMMENT;
    public static final ForeignKey<CommentRecord, AnswerRecord> FK_ANSWER_ID_IN_COMMENT = ForeignKeys0.FK_ANSWER_ID_IN_COMMENT;
    public static final ForeignKey<QuestionRecord, AccountRecord> FK_AUTHOR_ID_IN_QUESTION = ForeignKeys0.FK_AUTHOR_ID_IN_QUESTION;

    // -------------------------------------------------------------------------
    // [#1459] distribute members to avoid static initialisers > 64kb
    // -------------------------------------------------------------------------

    private static class Identities0 {
        public static Identity<AccountRecord, Integer> IDENTITY_ACCOUNT = Internal.createIdentity(AccountTable.ACCOUNT_TABLE, AccountTable.ACCOUNT_TABLE.ID);
        public static Identity<AnswerRecord, Integer> IDENTITY_ANSWER = Internal.createIdentity(AnswerTable.ANSWER_TABLE, AnswerTable.ANSWER_TABLE.ID);
        public static Identity<CommentRecord, Integer> IDENTITY_COMMENT = Internal.createIdentity(CommentTable.COMMENT_TABLE, CommentTable.COMMENT_TABLE.ID);
        public static Identity<QuestionRecord, Integer> IDENTITY_QUESTION = Internal.createIdentity(QuestionTable.QUESTION_TABLE, QuestionTable.QUESTION_TABLE.ID);
    }

    private static class UniqueKeys0 {
        public static final UniqueKey<AccountRecord> KEY_ACCOUNT_PRIMARY = Internal.createUniqueKey(AccountTable.ACCOUNT_TABLE, "KEY_account_PRIMARY", AccountTable.ACCOUNT_TABLE.ID);
        public static final UniqueKey<AnswerRecord> KEY_ANSWER_PRIMARY = Internal.createUniqueKey(AnswerTable.ANSWER_TABLE, "KEY_answer_PRIMARY", AnswerTable.ANSWER_TABLE.ID);
        public static final UniqueKey<CommentRecord> KEY_COMMENT_PRIMARY = Internal.createUniqueKey(CommentTable.COMMENT_TABLE, "KEY_comment_PRIMARY", CommentTable.COMMENT_TABLE.ID);
        public static final UniqueKey<QuestionRecord> KEY_QUESTION_PRIMARY = Internal.createUniqueKey(QuestionTable.QUESTION_TABLE, "KEY_question_PRIMARY", QuestionTable.QUESTION_TABLE.ID);
    }

    private static class ForeignKeys0 {
        public static final ForeignKey<AnswerRecord, AccountRecord> FK_AUTHOR_ID_IN_ANSWER = Internal.createForeignKey(Keys.KEY_ACCOUNT_PRIMARY, AnswerTable.ANSWER_TABLE, "fk_author_id_in_answer", AnswerTable.ANSWER_TABLE.AUTHOR_ID);
        public static final ForeignKey<AnswerRecord, QuestionRecord> FK_QUESTION_ID_IN_ANSWER = Internal.createForeignKey(Keys.KEY_QUESTION_PRIMARY, AnswerTable.ANSWER_TABLE, "fk_question_id_in_answer", AnswerTable.ANSWER_TABLE.QUESTION_ID);
        public static final ForeignKey<CommentRecord, AccountRecord> FK_AUTHOR_ID_IN_COMMENT = Internal.createForeignKey(Keys.KEY_ACCOUNT_PRIMARY, CommentTable.COMMENT_TABLE, "fk_author_id_in_comment", CommentTable.COMMENT_TABLE.AUTHOR_ID);
        public static final ForeignKey<CommentRecord, AnswerRecord> FK_ANSWER_ID_IN_COMMENT = Internal.createForeignKey(Keys.KEY_ANSWER_PRIMARY, CommentTable.COMMENT_TABLE, "fk_answer_id_in_comment", CommentTable.COMMENT_TABLE.ANSWER_ID);
        public static final ForeignKey<QuestionRecord, AccountRecord> FK_AUTHOR_ID_IN_QUESTION = Internal.createForeignKey(Keys.KEY_ACCOUNT_PRIMARY, QuestionTable.QUESTION_TABLE, "fk_author_id_in_question", QuestionTable.QUESTION_TABLE.AUTHOR_ID);
    }
}
